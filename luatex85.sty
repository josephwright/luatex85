
% \write18 emulation for luatex 0.85
% David Carlisle
% LPPL licence
% Borrowing heavily from Heiko Oberdiek

\ifx\pdfvariable\@undefined
\PackageWarning{luatex85}{Quitting this package now}
\expandafter\endinput
\fi



%%%%%%%%%%%%%%
\let\pdfoutput\outputmode
\let\pdftexversion\luatexversion
\let\pdfpagewidth\pagewidth
\let\pdfpageheight\pageheight
\protected\def\pdfliteral{\pdfextension literal}
\makeatletter
\directlua{% from Heiko's pdftexcmds
local function utf8_to_byte(str)
  local i = 0
  local n = string.len(str)
  local t = {}
  while i < n do
    i = i + 1
    local a = string.byte(str, i)
    if a < 128 then
      table.insert(t, string.char(a))
    else
      if a >= 192 and i < n then
        i = i + 1
        local b = string.byte(str, i)
        if b < 128 or b >= 192 then
          i = i - 1
        elseif a == 194 then
          table.insert(t, string.char(b))
        elseif a == 195 then
          table.insert(t, string.char(b + 64))
        end
      end
    end
  end
  return table.concat(t)
end
local function utf8_to_byte(str)
  local i = 0
  local n = string.len(str)
  local t = {}
  while i < n do
    i = i + 1
    local a = string.byte(str, i)
    if a < 128 then
      table.insert(t, string.char(a))
    else
      if a >= 192 and i < n then
        i = i + 1
        local b = string.byte(str, i)
        if b < 128 or b >= 192 then
          i = i - 1
        elseif a == 194 then
          table.insert(t, string.char(b))
        elseif a == 195 then
          table.insert(t, string.char(b + 64))
        end
      end
    end
  end
  return table.concat(t)
end
function mdfivesum(str, mode)
  if mode == "byte" then
    str = utf8_to_byte(str)
  end
  escapehex(md5.sum(str))
end
function filemdfivesum(filename)
  local foundfile = kpse.find_file(filename, "tex", true)
  if foundfile then
    local filehandle = io.open(foundfile, "r")
    if filehandle then
      local contents = filehandle:read("*a")
      escapehex(md5.sum(contents))
    end
  end
end
function escapehex(str, mode)
  if mode == "byte" then
    str = utf8_to_byte(str)
  end
  tex.write((string.gsub(str, ".",
    function (ch)
      return string.format("\@percentchar02X", string.byte(ch))
    end
  )))
end
}

\long\def\pdf@mdfivesum#1{%
  \directlua{%
    mdfivesum("\luaescapestring{#1}", "byte")%
  }%
}%
\long\def\pdf@mdfivesumnative#1{%
  \directlua{%
    mdfivesum("\luaescapestring{#1}")%
  }%
}%
\def\pdf@filemdfivesum#1{%
  \directlua{%
    filemdfivesum("\luaescapestring{#1}")%
  }%
}%

\chardef\pdf@shellescape=1

\@namedef{ver@ifpdf.sty}{2015/01/01}
\@namedef{ver@ifluatex.sty}{2015/01/01}
\@namedef{ver@luatex-loader.sty}{2015/01/01}
\@namedef{ver@pdftexcmds.sty}{2015/01/01}

\@namedef{ver@ifplatform.sty}{2015/01/01}
\newif\ifluatex\luatextrue
\newif\ifpdf\pdftrue

\newif\ifwindows
\newif\if@ip@nix@
 \csname\directlua{
      if os.type == "unix" then
        tex.sprint("@ip@nix@true")
      elseif os.type == "windows" then
        tex.sprint("windowstrue")
      end
    }\endcsname


\let\shellorigwrite\write


\directlua{%
function write_or_shell_escape()
  local s = token.scan_int() 
  if (s==18) then
     tex.sprint(\the\numexpr\catcodetable@atletter\relax,"\string\\shellwriteescape ")
  else
     tex.sprint(\the\numexpr\catcodetable@atletter\relax,"\string\\shellorigwrite " .. s)
  end
end
}
\protected\def\write{\directlua{write_or_shell_escape()}}


\def\shellwriteescape#1{\directlua{os.execute("\luaescapestring{#1}")}}
%%%%%
 \let\pdftexcmds@directlua\directlua
 \def\pdf@ifdraftmode{%
   \ifnum\draftmode=\@ne
    \expandafter\@firstoftwo
   \else
     \expandafter\@secondoftwo
   \fi}

%%%%%%%%%%%

\let\pdfpagewidth\pagewidth
\let\pdfpageheight\pageheight
\let\pdfadjustspacing\adjustspacing
\let\pdfprotrudechars\protrudechars
\let\pdfnoligatures\ignoreligaturesinfont
\let\pdffontexpand\expandglyphsinfont
\let\pdfcopyfont\copyfont
\let\pdfxform\saveboxresource
\let\pdflastxform\lastsavedboxresourceindex
\let\pdfrefxform\useboxresource
\let\pdfximage\saveimageresource
\let\pdflastximage\lastsavedimageresourceindex
\let\pdflastximagepages\lastsavedimageresourcepages
\let\pdfrefximage\useimageresource
\let\pdfsavepos\savepos
\let\pdflastxpos\lastxpos
\let\pdflastypos\lastypos
\let\pdfoutput\outputmode
\let\pdfdraftmode\draftmode
\let\pdfpxdimen\pxdimen
\let\pdfinsertht\insertht
\let\pdfnormaldeviate\normaldeviate
\let\pdfuniformdeviate\uniformdeviate
\let\pdfsetrandomseed\setrandomseed
\let\pdfrandomseed\randomseed
\let\pdfprimitive\primitive
\let\ifpdfprimitive\ifprimitive
\let\ifpdfabsnum\ifabsnum
\let\ifpdfabsdim\ifabsdim









\protected\def\pdfliteral{\pdfextension literal}
\protected\def\pdfcolorstack{\pdfextension colorstack}
\protected\def\pdfsetmatrix{\pdfextension setmatrix}
\protected\def\pdfsave{\pdfextension save\relax}
\protected\def\pdfrestore{\pdfextension restore\relax}
\protected\def\pdfobj{\pdfextension obj }
\protected\def\pdfrefobj{\pdfextension refobj }
\protected\def\pdfannot{\pdfextension annot }
\protected\def\pdfstartlink{\pdfextension startlink }


\protected\def\pdfendlink{\pdfextension endlink\relax}
\protected\def\pdfoutline{\pdfextension outline }
\protected\def\pdfdest{\pdfextension dest }
\protected\def\pdfthread{\pdfextension thread }
\protected\def\pdfstartthread{\pdfextension startthread }
\protected\def\pdfendthread{\pdfextension endthread\relax}
\protected\def\pdfinfo{\pdfextension info }
\protected\def\pdfcatalog{\pdfextension catalog }
\protected\def\pdfnames{\pdfextension names }
\protected\def\pdfincludechars  {\pdfextension includechars }
\protected\def\pdffontattr{\pdfextension fontattr }
\protected\def\pdfmapfile{\pdfextension mapfile }
\protected\def\pdfmapline{\pdfextension mapline }
\protected\def\pdftrailer{\pdfextension trailer }
\protected\def\pdfglyphtounicode{\pdfextension glyphtounicode }

\edef\pdfcompresslevel{\pdfvariable compresslevel}
\edef\pdfobjcompresslevel{\pdfvariable objcompresslevel}
\edef\pdfdecimaldigits{\pdfvariable decimaldigits}
\edef\pdfgamma{\pdfvariable gamma}
\edef\pdfimageresolution{\pdfvariable imageresolution}
\edef\pdfimageapplygamma{\pdfvariable imageapplygamma}
\edef\pdfimagegamma{\pdfvariable imagegamma}
\edef\pdfimagehicolor{\pdfvariable imagehicolor}
\edef\pdfimageaddfilename{\pdfvariable imageaddfilename}
\edef\pdfpkresolution{\pdfvariable pkresolution}
\edef\pdfinclusioncopyfonts{\pdfvariable inclusioncopyfonts}
\edef\pdfinclusionerrorlevel{\pdfvariable inclusionerrorlevel}
\edef\pdfreplacefont{\pdfvariable replacefont}
\edef\pdfgentounicode{\pdfvariable gentounicode}
\edef\pdfpagebox{\pdfvariable pagebox}
\edef\pdfminorversion{\pdfvariable minorversion}
\edef\pdfuniqueresname{\pdfvariable uniqueresname}
\edef\pdfhorigin{\pdfvariable horigin}
\edef\pdfvorigin{\pdfvariable vorigin}
\edef\pdflinkmargin{\pdfvariable linkmargin}
\edef\pdfdestmargin{\pdfvariable destmargin}
\edef\pdfthreadmargin{\pdfvariable threadmargin}
\edef\pdfpagesattr{\pdfvariable pagesattr}
\edef\pdfpageattr{\pdfvariable pageattr}
\edef\pdfpageresources{\pdfvariable pageresources}
\edef\pdfxformattr{\pdfvariable xformattr}
\edef\pdfxformresources{\pdfvariable xformresources}
\edef\pdfpkmode{\pdfvariable pkmode}

% Address a change of number for some node creation
\directlua{
  saved_node_new = node.new
  function node.new(a,b)
    if a == 8 and b == 8 then
      b = 16
    end
    return(saved_node_new(a,b))
  end
}